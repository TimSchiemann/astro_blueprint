@use "sass:math";

@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}

	@return $number;
}

@function rem-calc($value) {
	$rem-value: math.div(strip-unit($value), 16) + rem;

	@return $rem-value;
}

//TODO: pick color scheme
//have to set background gradients for e.g. buttons manually
$colors: (
	white-1: oklch(96.26% 0.02 298.2),
	black-1: oklch(0% 0 0),
	positive: oklch(68.57% 0.134 167.49),
	negative: oklch(60.42% 0.191 21.46),
	milkglass: oklch(100% 0 0 / 30%),
	primary: hsl(221deg, 51%, 16%),
	secondary: hsl(0deg, 0%, 90%),
	accent: oklch(76.18% 0.185 69.56),
	socials: (
		facebook: oklch(64.19% 0.181 251.54),
		twitter: oklch(67.94% 0.159 243.72),
		instagram-yellow: oklch(85.31% 0.127 77.56),
		instagram-pink: oklch(63.57% 0.199 352.43),
		youtube: oklch(51.85% 0.208 22.52),
	),

	dark-theme: (),
);

@function color($name, $category: null, $nested-name: null) {
	// Retrieve a first level color
	@if not $category and not $nested-name {
		@return map-get($colors, $name);
	}

	// Retrieve a second level color
	@if $category != null and $nested-name == null {
		@return map-get(map-get($colors, $name), $category);
	}

	// Retrieve a third level color
	@else if $category != null and $nested-name != null {
		@return map-get(
			map-get(map-get($colors, $name), $category),
			$nested-name
		);
	}
}

@function rem-calc($value) {
	$base-font-size: 16;

	$rem-value: math.div(strip-unit($value), $base-font-size) + rem;

	@return $rem-value;
}

//Helper for hover and/or focus States
@mixin hover-focus-state($type: null) {
	@if $type == hover {
		&:hover {
			@content;
		}
	} @else if $type == focus {
		&:focus-visible {
			@content;
		}
	} @else {
		&:hover,
		&:focus-visible {
			@content;
		}
	}
}

//TODO: Evaluate functionality for splitting into hsl
@mixin define-color($title, $color) {
	--#{$title}-h: #{hue($color)};
	--#{$title}-l: #{lightness($color)};
	--#{$title}-s: #{saturation($color)};
	--#{$title}-a: #{alpha($color)};
}

@function color-assembly(
	$title,
	$hue: 0deg,
	$lightness: 0%,
	$saturation: 0%,
	$alpha: 0
) {
	@return hsla(
		calc(var(--#{$title}-h) + #{$hue}),
		calc(var(--#{$title}-s) + #{$saturation}),
		calc(var(--#{$title}-l) + #{$lightness}),
		calc(var(--#{$title}-a) + #{$alpha})
	);
}

//breakpoint generator
$breakpoints: (
	mobile: 400px,
	desktop: 900px,
);

@mixin breakpoint($breakpoint) {
	$min-width: map-get($breakpoints, $breakpoint);

	@media only screen and (min-width: $min-width) {
		@content;
	}
}

//milk glass effect
@mixin milkglass() {
	background-color: oklch(100% 0 0 / 0.2);
	backdrop-filter: blur(5px);
	box-shadow: 0 4px 30px oklch(0% 0 0 / 0.1);
	border-radius: inherit;
	backdrop-filter: blur(5px);
	border: 1px solid oklch(100% 0 0 / 0.3);
}
