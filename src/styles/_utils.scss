@use 'sass:math';

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
      @return math.div($number, ($number * 0 + 1));
    }

    @return $number;
}

@function rem-calc($value) {
    $rem-value: math.div(strip-unit($value), 16) + rem; 

    @return $rem-value;
}

$colors: (
    white: hsl(0deg 0% 100%),
    black: hsl(0deg 0% 0%),
    positive: hsl(163deg 72% 41%),
    negative: hsl(356deg 69% 56%),

    primary: hsl(221deg, 51%, 16%),
    secondary: hsl(0deg, 0%, 90%),
    accent: hsl(37deg, 98%, 53%),


    socials: (
        facebook: hsl(208deg 92% 53%),
        twitter: hsl(203deg 89% 53%),
        instagram-yellow:hsl(37deg 97% 70%),
        instagram-pink: hsl(329deg 70% 58%),
        youtube: hsl(348deg 97% 39%),
    ),

    dark-theme: (
    ),
);

@function color($name, $category: null, $nested-name: null) {
    // Retrieve a first level color
    @if not $category and not $nested-name {
        @return map-get($colors, $name);
    }

    // Retrieve a second level color
    @if $category != null and $nested-name == null {
        @return map-get(map-get($colors, $name), $category);
    }

    // Retrieve a third level color
    @else if $category != null and $nested-name != null {
        @return map-get(map-get(map-get($colors, $name), $category), $nested-name);
    }
}

@function rem-calc($value) {
    $base-font-size: 16;

    $rem-value: math.div(strip-unit($value), $base-font-size) + rem;
  
    @return $rem-value;
  }

//Helper for hover and/or focus States
@mixin hover-focus-state($type: null) {
    @if $type == hover {
        &:hover {
            @content;
        }
    } @else if $type == focus {
        &:focus-visible {
            @content;
        }
    } @else {
        &:hover,
        &:focus-visible {
            @content;
        }
    }
}

//TODO: Evaluate functionality for splitting into hsl
@mixin define-color($title, $color) {
    --#{$title}-h: #{hue($color)};
    --#{$title}-l: #{lightness($color)};
    --#{$title}-s: #{saturation($color)};
    --#{$title}-a: #{alpha($color)};
}

@function color-assembly($title, $hue: 0deg, $lightness: 0%, $saturation: 0%, $alpha: 0) {
    @return hsla(
        calc(var(--#{$title}-h) + #{$hue}), 
        calc(var(--#{$title}-s) + #{$saturation}),
        calc(var(--#{$title}-l) + #{$lightness}),
        calc(var(--#{$title}-a) + #{$alpha}),
    );
}

//breakpoint generator
$breakpoints: (
    mobile: 400px,
    desktop: 900px
);

@mixin breakpoint($breakpoint) {
    $min-width: map-get($breakpoints, $breakpoint);

    @media only screen and (min-width: $min-width) {
        @content;
    }
}